********
**FACE**
********

::

	FACE = <face_name> {char_list} <input_list>

-----------------------
**Description / Usage**
-----------------------

This optional card allows the user to create faces (surfaces). There are multiple formats,
each of which has variable input requirements, each of which is described below.

The first parameter supplies a name

::

	face_name      user-supplied name for the new face.

while the {char_list} parameter, which has four options, identifies the geometric nature
of the face. The four options have unique inputs (<input_list>) parameterizing its face;
these are listed below for each {char_list} option:

=================== ====================================================================
**PLANE**            N - number of edges (see EDGE) bounding the face.

                     e\ :sub:`1` ... e\ :sub:`N` - names of the edges bounding the face.
**POLY**             N - number of vertices on the boundary.

                     x y z ...- coordinates of the vertices on the boundary.
                     There should be N triplets (see Technical Discussion).
**POLY_VERT**        N - number of vertices on the boundary.

                     v\ :sub:`1` ... v\ :sub:`N` - names of vertices (see VERTEX) on the
                     boundary. There should be N triplets (see
                     Technical Discussion).
=================== ====================================================================

If the *Geometry Specifications* section is present, then the *END OF FACE* card is
required, even if there are no *FACE* cards.

There is no default value for any argument.

------------
**Examples**
------------

Here is a sample card of each face type:
::

	FACE = face1 PLANE 3 e1 e2 e3

::

	FACE = face2 POLY 3 0.0 0.0 0.0 1.0 0.0 0.0 0.0 1.0 0.0

::

	FACE = POLY_VERT 3 v1 v2 v3

where the vertices v1 through v3 and the edges e1 through e3 already existed.

-------------------------
**Technical Discussion**
-------------------------

The *FACE* command will create planar faces. These are a type of surface, but are of
course flat. The edges and vertices that the FACE and POLY_VERT version use can be
created either in the *Goma* input deck (via *EDGE* and *VERTEX* commands), or read in
from an ACIS file via the *ACIS file* command.

The PLANE version will construct a FACE with a boundary created by compositing
the specified edges. They must be linked serially (i.e., e2 connects to e3, e3 connects
to e4, etc.), and they must all be coplanar. A common error is to specify curves created
in Cubit that are a mix of “free” curves and “bound” curves. A “free” curve is one that
is created directly (e.g., “create curve ...”), whereas a “bound” curve is one
that is created indirectly (e.g., you create a brick and get 12 boundary curves). They are
not compatible within the PLANE command.

The POLY version will create a polygon whose boundary edges are straight line
segments between the specified vertices (coordinates). The vertices must be coplanar.
There is a known outstanding issue with non-convex polygons. If you need non-convex
polygons the workaround is to create them in Cubit and pass them to Goma via the
*ACIS file* command. The example POLY command will result in a 2D (z=0) triangle.

The POLY_VERT command is identical to the POLY command except the vertices are
referenced by name instead of specified numerically.

----------
**Theory**
----------

No Theory.

--------
**FAQs**
--------

No FAQs.

--------------
**References**
--------------

GT-021.2: Common Geometry Model (CGM) Usage for GOMA, August 20, 2002, M.
M. Hopkins